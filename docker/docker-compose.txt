///////////////////////// DOCKER COMPOSE /////////////////////////

Un fichier docker compose me permet de faire tourner plusieurs container et de les lié entre eux, par exemple un container pour mon front, un pour mon api, et un pour ma bdd.

je déclare une version sous forme key:value, en fonction de la version du docker daemon que j'utilise, en général on utilise la version 3 sans préciser la sous version.

Ensuite la key services, pour déclarer mes différent services, par exemple web, avec l'image associée.

Je peux utiliser directement une image de la registrery docker ou déclarer mon propre dockerfile.

Pour une image existante, par exemple alpine :

- image: alpine

Pour utiliser mon dockerfile :

- build:
      context: .
      dockerfile: Dockerfile		** Dockerfile est le nom de mon Dockerfile **

Ou :

- build: .				**indique mon dockerfile est au même niveau et est le seul**

Si j'ai plusieurs dockerfile dans des répertoires distinct, par exemple un répertoire "api" et un autre "front", je précise lequel dans context, ex :

- build:
      context: ./api
      dockerfile: Dockerfile

////////////////////////////////////////////////////

Je peux passer des arguments à mon dockerfile depuis mon dockercompose, ex :

- build:
      context: ./api
      dockerfile: Dockerfile
      args:
	   - FOLDER=test

Puis dans mon dockerfile :

- ARG FOLDER

Puis je peux lancer une commande avec mon arg dans mon dockerfile :

- RUN mkdir $FOLDER

////////////////////////////////////////////////////

Pour attribuer un port à mon container sur ma machine locale, toujours dans mon container api :

- ports:
	- 80:80		**le premier 80 est sur ma machine, le deuxième celui de mon container **

////////////////////////////////////////////////////

Pour déclarer un volume dans mon docker compose toujours dans mon container api :

- volumes:
	- type: bind
	  source: ./data		**ici mon dossier sur ma machine locale**
	  target: /app/data		**ici le dossier sur mon container**


////////////////////////////////////////////////////

Enfin pour faire communiquer mes container entre eux, j'utilise des networks que je déclare avant services :

- networks:
	bdd:
	front:

Il "api" et "front" n'ont volontairement pas de value.

Puis dans mon service api je déclare :

- networks:
	-front
	-bdd

Puis la même chose dans front sans "bdd" pour indiquer que mes deux services sont autorisés à communiquer entre eux, mais que mon service front ne peut accéder directement à mon service "bdd".

////////////////////////////////////////////////////

Pour lancer mon dockercompose :

- docker-compose build

- docker-compose up

Pour démarrer un seul service :

- docker-compose run front	** front étant le nom de mon service **

////////////////////////////////////////////////////

Pour retirer les container générer par mon docker compose :

- docker-compose down
